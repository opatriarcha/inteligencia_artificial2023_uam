# Python3 Program to print BFS traversal
# from a given source vertex. BFS(int s)
# traverses vertices reachable from s.
from collections import defaultdict

# Representação do grafo usando a lista de adjacências


class Graph:

	# Constructor
	def __init__(self):
		self.graph = defaultdict(list)

	# Adiciona edge no grafo
	def addEdge(self, u, v):
		self.graph[u].append(v)

	# função que printa um BFS do grafo
	def BFS(self, s):

		# marca todos os vertices como não visitados
		visited = [False] * (max(self.graph) + 1)

		# Cria a fila para o BFS
		queue = []

		# marca o nó original como visirado e enfilera
		queue.append(s)
		visited[s] = True

		while queue:

            # desenfilera um vértice da fila e imprime
			s = queue.pop(0)
			print(s, end=" ")

			# Get all adjacent vertices of the
			# dequeued vertex s. If a adjacent
			# has not been visited, then mark it
			# visited and enqueue it

            # Pega todos os vértices adjacentes do vértice retirado da fila s. Se um adjacente não foi visitado, 
            # marca como visitado e enfilera. 
			for i in self.graph[s]:
				if visited[i] == False:
					queue.append(i)
					visited[i] = True

# Driver code


# Cria um grafo dado no
# diagrama abaixo
g = Graph()
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)

print("Following is Breadth First Traversal"
	" (starting from vertex 2)")
g.BFS(2)
